{"version":3,"sources":["components/Scoreboard/index.js","components/Jumbotron/index.js","components/Card/index.js","components/Card/cards.js","App.js","serviceWorker.js","index.js"],"names":["Scoreboard","props","react_default","a","createElement","className","score","topScore","Jumbotron","id","components_Scoreboard","cardStyle","width","Card","style","onClick","clickedImage","name","src","url","newCardImage","allCardImages","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","cards","bind","assertThisInitialized","j","x","i","length","Math","floor","random","setState","objectSpread","reduce","card","defineProperty","undefined","_this2","console","log","_ref","newTopScore","resetGame","shuffleCards","_this3","components_Jumbotron","map","image","components_Card","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c5b917f8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./scoreboard.css\"\r\n\r\nfunction Scoreboard(props) {\r\n    return (\r\n\r\n        <div className=\"row\">\r\n            <div className=\"col-md-6\">\r\n                <span className=\"float-right\">Current Score: {props.score}</span>\r\n            </div>\r\n            <div className=\"col-md-6\">\r\n                <span className=\"float-left\">Top Score:{props.topScore}</span>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Scoreboard;","import React from \"react\";\r\nimport Scoreboard from \"../Scoreboard\";\r\nimport \"./jumbotron.css\";\r\n\r\nfunction Jumbotron(props) {\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"header-text\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-12\">\r\n                        <h1 className=\"text-center\">She-Ra</h1>\r\n                        <h3 className=\"text-center\">Memory Game</h3>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\" id=\"instructions\">\r\n                    <div className=\"text-center col-md-4\">\r\n                        <span>Click on an image to earn points</span>\r\n                    </div>\r\n                    <div className=\"text-center col-md-4\">\r\n                        <span>Click the same image twice, you lose!</span>\r\n                    </div>\r\n                    <div className=\"text-center col-md-4\">\r\n                        <div className=\"score\">\r\n                            <Scoreboard\r\n                                score={props.score}\r\n                                topScore={props.topScore}\r\n                            >\r\n\r\n                            </Scoreboard>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Jumbotron;","import React from \"react\";\r\n\r\nimport \"./card.css\";\r\n\r\nconst cardStyle = {\r\n    width: \"12em\"\r\n}\r\n\r\nfunction Card(props) {\r\n    return (\r\n\r\n        <div className=\"col-md-3\">\r\n            <div className=\"card\" style={cardStyle} onClick={() => props.clickedImage(props.name)}>\r\n                <div className=\"img-container\">\r\n                    <img src={props.url} style={cardStyle} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Card;","function newCardImage(name, url) {\r\n    return {\r\n        name, url\r\n    }\r\n}\r\n\r\nlet allCardImages = [\r\n    newCardImage(\"Glimmer\", \"/images/glimmer.gif\"),\r\n    newCardImage(\"Bow\", \"/images/bow.png\"),\r\n    newCardImage(\"Mermista\", \"/images/mermista.png\"),\r\n    newCardImage(\"Catra\", \"/images/catra.png\"),\r\n    newCardImage(\"Skyhawk\", \"/images/seahawk.png\"),\r\n    newCardImage(\"Adora\", \"/images/adora.jpg\"),\r\n    newCardImage(\"She-Ra\", \"/images/shera.jpg\"),\r\n    newCardImage(\"Entrapta\", \"/images/entrapta.png\"),\r\n    newCardImage(\"Perfuma\", \"/images/perfuma.png\"),\r\n    newCardImage(\"Queen Angella\", \"/images/queen-angella.jpg\"),\r\n    newCardImage(\"Swift-Wind\", \"/images/swiftwind.jpg\"),\r\n    newCardImage(\"Scorpia\", \"/images/scorpia.jpg\")\r\n\r\n]\r\n\r\nexport default allCardImages;","import React, { Component } from \"react\";\n\nimport Jumbotron from \"./components/Jumbotron\";\nimport Card from \"./components/Card\";\nimport cards from \"./components/Card/cards\";\nimport allCardImages from './components/Card/cards';\n// import Footer from \"./components/Footer\";\n\nimport './App.css';\n\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      cards,\n      score: 0,\n      topScore: 0\n    }\n    this.clickedImage = this.clickedImage.bind(this);\n  }\n\n  shuffleCards(cards) {\n    var j, x, i;\n    for (i = cards.length - 1; i > 0; i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      x = cards[i];\n      cards[i] = cards[j];\n      cards[j] = x;\n    }\n    return cards;\n  }\n\n  resetGame() {\n    this.setState({\n      score: 0,\n      ...cards.reduce((allCardImages, card) => {\n        return {\n          ...allCardImages,\n          [card.name]: undefined\n        }\n      }, {})\n    })\n  }\n\n\n\n  clickedImage(name) {\n    //update state (push the image name into the array)\n    //if the image hasn't been clicked before, increase the score\n    console.log('wtf', this);\n    this.setState((state, props) => {\n      if (state[name] === undefined) {\n        // not clicked \n        let newTopScore = this.state.topScore\n        if (this.state.score >= this.state.topScore) {\n          newTopScore = this.state.score + 1\n        }\n\n        return {\n          score: state.score + 1,\n          [name]: \"clicked\",\n          topScore: newTopScore\n        }\n      }\n      else {\n        this.resetGame();\n      }\n\n\n\n\n    });\n    // this.setState({ score: this.state.score + 1 })\n    this.shuffleCards(allCardImages);\n\n  }\n\n\n  render() {\n\n    return (\n      <div>\n        < Jumbotron\n          score={this.state.score}\n          topScore={this.state.topScore} />\n        <div className=\"container\">\n          <div className=\"row\">\n            {allCardImages.map(image => {\n              return (\n                < Card name={image.name}\n                  key={image.name}\n                  url={image.url}\n                  clickedImage={this.clickedImage} />\n              )\n            }\n            )};\n          </div>\n        </div>\n      </div>\n\n    )\n  }\n}\n\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}